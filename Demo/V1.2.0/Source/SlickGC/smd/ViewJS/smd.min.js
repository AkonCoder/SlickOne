var kcommon = function () { function t() { } return t.dataTypeDict = {}, t.inputTypeDict = {}, t.dataTypeDict.VARCHAR = 1, t.dataTypeDict.INT = 2, t.dataTypeDict.DECIMAL = 3, t.dataTypeDict.DATE = 4, t.dataTypeDict.TEXT = 5, t.inputTypeDict.TEXTBOX = 1, t.inputTypeDict.PASSWORD = 2, t.inputTypeDict.COMBOBOX = 3, t.inputTypeDict.CHECKBOXGROUP = 4, t.inputTypeDict.RADIOGROUP = 5, t.inputTypeDict.MULTIPLELIST = 6, t.inputTypeDict.DATE = 7, t.inputTypeDict.TEXT = 8, t.inputTypeDict.BUTTON = 16, t.inputTypeDict.IMAGE = 17, t }(), kmaster = function () { function t() { } function e() { $(".progress .bar").progressbar({ transition_delay: 200 }); var t = $(".js-loading-bar"); t.find(".bar"); t.modal("show"), setTimeout(function () { t.modal("hide") }, 500) } function n() { window.templates = {}, window.templates.common = Handlebars.compile($("#control-customize-template").html()), window.templates.textbox = Handlebars.compile($("#textbox-template").html()), window.templates.passwordbox = Handlebars.compile($("#textbox-template").html()), window.templates.combobox = Handlebars.compile($("#combobox-template").html()), window.templates.selectmultiplelist = Handlebars.compile($("#combobox-template").html()), window.templates.radiogroup = Handlebars.compile($("#combobox-template").html()), window.templates.checkboxgroup = Handlebars.compile($("#combobox-template").html()), window.templates.text = Handlebars.compile($("#text-template").html()), window.templates.date = Handlebars.compile($("#date-template").html()), window.templates.form = Handlebars.compile($("#form-template").html()) } function i() { $(".droppedFields").droppable({ activeClass: "activeDroppable", hoverClass: "hoverDroppable", accept: ":not(.ui-sortable-helper)", drop: function (e, n) { if (0 != t.mcurrentEntityDefID) { var i = n.draggable; (i = $(n.draggable).find(".modele").clone()).removeClass("modele"), i.removeClass("selectorField"), i.addClass("droppedField"), i[0].id = "CTRL-DIV-" + o(), i.appendTo(this), i.click(function () { var t = $(this).find("[class*=ctrl]")[0]; r($.trim(t.className.match("ctrl-.*")[0].split(" ")[0].split("-")[1]), this.id) }) } else $.msgBox({ title: "Master / Entity", content: "请先选择表单记录，再拖动控件！", type: "info" }) } }), $(".droppedFields").mouseenter(function () { t.tableToDelete = this, $("#divDeleteTable").show(), $("#divDeleteTable").position({ my: "right top", at: "right top", of: $(this).parent().children().last() }) }), $(".droppedFields").mouseleave(function () { $("#divDeleteTable").hide() }), $(".droppedField").click(function () { var t = $(this).find("[class*=ctrl]")[0]; r($.trim(t.className.match("ctrl-.*")[0].split(" ")[0].split("-")[1]), this.id) }) } function o() { var e = 1e3; return $(".droppedField").each(function (t, n) { var i = $(n).attr("id").split("-")[2]; parseInt(i) > parseInt(e) && (e = i) }), t.mctrlIndex = parseInt(e) + 1, t.mctrlIndex } function a() { $(".selectorField").draggable({ helper: "clone", stack: "div", cursor: "move", cancel: null }) } function r(t, e) { var n = {}, i = window.templates[t]; void 0 === i && (i = function () { return "" }); var o = { header: $("#" + e).find(".control-label").text(), content: i(n), type: t, forCtrl: e, display: "block" }, a = window.templates.common(o) + ""; BootstrapDialog.show({ title: "字段属性", message: $('<div id="customization_modal" name="customization_modal"/>').append(a), draggable: !0 }), setTimeout(function () { fieldPopup.popupControl(t, e) }, 300) } function l() { $("#divDeleteTable").hide(), $("#divDeleteTable").mouseenter(function () { $("#divDeleteTable").show() }), $("#selected-content").sortable({ cancel: null, start: function (t, e) { $("#divDeleteTable").hide() } }).disableSelection(), d() } function d() { $(".eavModalDialog", " body").on("hidden", function () { $(this).removeData("modal"), $(".modal-body", this).empty() }) } return t.mcurrentEntityDefID = 0, t.mctrlIndex = 1001, t.moutputHtmlPageContent = "", t.gselectedCompanyID = 0, t.init = function () { t.gselectedCompanyID = lsm.getWebLogonCompanyID() }, t.docReady = function () { e(), n(), i(), a(), l(), d() }, t.createEntityDef = function () { t.mcurrentEntityDefID = 0; var e = {}; e.label = "", e.name = "", e.desc = ""; var n = window.templates.form; void 0 === n && (n = function () { return "" }); var i = { header: "表单定义", content: n(e), display: "block" }; $("[name=custom_form_modal]").remove(), BootstrapDialog.show({ title: "表单属性", message: $('<div id="custom_form_modal" name="custom_form_modal"/>').append(i.content), draggable: !0 }) }, t.openEntityDef = function () { BootstrapDialog.show({ title: "表单列表", message: $("<div></div>").load("entitydef/list"), draggable: !0 }) }, t.setMapping = function () { BootstrapDialog.show({ title: "设置", message: $("<div></div>").load("setting/index"), draggable: !0 }) }, t.showAttributeList = function () { BootstrapDialog.show({ title: "字段列表", message: $("<div></div>").load("attribute/list"), draggable: !0 }) }, t.popupEntityDef = function () { var e = {}; if (0 == t.mcurrentEntityDefID) return !1; jshelper.ajaxGet("api/eavdata/GetEntityDefByID/" + t.mcurrentEntityDefID, null, function (t) { if (1 == t.Status) { var n = t.Entity; e.label = n.EntityTitle, e.name = n.EntityName, e.desc = n.Description; var i = window.templates.form; void 0 === i && (i = function () { return "" }); var o = { header: "表单定义", content: i(e), display: "block" }; $("[name=custom_form_modal]").remove(), BootstrapDialog.show({ title: "表单属性", message: $('<div id="customer_form_modal" name="custom_form_modal"/>').append(o.content), draggable: !0 }) } else $.msgBox({ title: "Ooops", content: t.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, t.deleteTable = function () { t.tableToDelete && $.msgBox({ title: "Are You Sure", content: "确定要删除表格吗?", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (e) { if ("Yes" == e) { for (var n = $(t.tableToDelete).parent().find("input[class=hiddenAttributeEntity]"), i = new Array, o = 0; o < n.length; o++)void 0 != n[o].val && (i[o] = $.parseJSON(n[o].value)); $("body").append($("#divDeleteTable")), $(t.tableToDelete).parent().remove(), t.tableToDelete = null, $("#divDeleteTable").hide(); var a = $("#selected-content")[0].outerHTML, r = { ID: t.mcurrentEntityDefID, TemplateContent: a, HTMLContent: "" }, l = {}; return l.EntityDef = r, l.EntityAttributeList = i, void jshelper.ajaxPost("api/eavdata/DeleteAttributeWithTemplate", JSON.stringify(l), function (t) { 1 == t.Status ? $.msgBox({ title: "Master / Table", content: "表格已经删除，并且模板内容已经更新！", type: "info" }) : $.msgBox({ title: "Ooops", content: t.Message, type: "error", buttons: [{ value: "Ok" }] }) }) } } }) }, t.generateHTMLContent = function () { var t = $("#selected-content").clone(); t.find("div").each(function (t, e) { $(e).removeClass("draggableField ui-draggable well ui-droppable ui-sortable") }); var e = $("#txtFormTitle")[0].value; return void 0 != e && "" != e || (e = "自定义表单示例"), t.find("#form-title-div").remove(), t.html() }, t.previewForm = function () { 1 == t.validateInput() && window.open("preview/index/" + t.mcurrentEntityDefID) }, t.showAdjustDialog = function () { BootstrapDialog.show({ title: "表格属性", message: $("<div></div>").load("setting/table"), draggable: !0 }) }, t.validateInput = function () { var t = !0; return $("#selected-content").find("[class=hiddenAttributeEntity]").each(function (e, n) { if (!n.value || "" == n.value) { t = !1; var i = $(n).parent().children(":first").text(); return $.msgBox({ title: "Master / Field", content: "字段信息需要填写完整并先保存, 当前字段:" + i, type: "alert" }), !1 } var o = $.parseJSON(n.value); if (null == o.AttrName || "" == o.AttrName) return t = !1, $.msgBox({ title: "Master / Field", content: "字段信息需要填写完整, 当前字段类型:" + o.type, type: "alert" }), !1 }), t }, t.validatedSaveTemplate = function () { 1 == t.validateInput() && eavManager.SaveTemplateWithHTMLContent() }, t }(), entitydeflist = function () { function t() { } return t.mselectedEntityDefID = 0, t.mselectedEntityDefRow = null, t.load = function () { $("#loading-indicator").show(); var e = {}; e.CompanyID = kmaster.gselectedCompanyID, jshelper.ajaxPost("api/eavdata/GetEntityDefList2", JSON.stringify(e), function (e) { if (1 == e.Status) { var n = document.querySelector("#myEntityDefGrid"); $(n).empty(); var i = { columnDefs: [{ headerName: "ID", field: "ID", width: 40 }, { headerName: "标题", field: "EntityTitle", width: 120 }, { headerName: "表单名称", field: "EntityName", width: 120 }, { headerName: "表单编码", field: "EntityCode", width: 160 }, { headerName: "描述", field: "Description", width: 60 }, { headerName: "创建日期", field: "CreatedDateTime", width: 120 }], rowSelection: "single", onSelectionChanged: function () { i.api.getSelectedRows().forEach(function (e, n) { t.mselectedEntityDefID = e.ID, t.mselectedEntityDefRow = e }) } }; new agGrid.Grid(n, i), i.api.setRowData(e.Entity), $("#loading-indicator").hide() } else $.msgBox({ title: "EntityDef / List", content: "读取表单定义记录失败！错误信息：" + e.Message, type: "error" }) }) }, t.openEntityDefTemplate = function (t) { jshelper.ajaxGet("api/eavdata/GetEntityDefByID/" + t, null, function (t) { if (1 == t.Status) { var e = t.Entity; null != e.TemplateContent && "" != e.TemplateContent ? $("#selected-content").replaceWith(e.TemplateContent) : $.msgBox({ title: "Master / Entity", content: "表单模板内容为空，请每次设计后并保存模板内容！", type: "alert" }), kmaster.docReady(), $("#txtFormTitle").attr("value", e.EntityTitle) } else $.msgBox({ title: "Ooops", content: t.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, t.sure = function () { if (kmaster.mcurrentEntityDefID = t.mselectedEntityDefID, 0 == kmaster.mcurrentEntityDefID) return !1; $("#modelEntityDefListForm").modal("hide"), t.openEntityDefTemplate(kmaster.mcurrentEntityDefID) }, t.delete = function () { 0 != t.mselectedEntityDefID && $.msgBox({ title: "Are You Sure", content: "确定要删除表单定义记录吗? 这将会删除表单实例数据！", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (e) { "Yes" == e && jshelper.ajaxGet("api/eavdata/DeleteEntityDef/" + t.mselectedEntityDefID, null, function (e) { 1 == e.Status ? ($.msgBox({ title: "Master / Entity", content: "表单定义记录已经删除！", type: "info" }), t.mselectedEntityDefID = 0, t.load()) : $.msgBox({ title: "Master / Entity", content: "表单定义记录删除失败！错误信息：" + e.Message, type: "error" }) }) } }) }, t }(), fieldManager = function () { function t() { } return t.popupControl = function (t, e) { var n = $("#eavForm"), i = $("#" + e), o = i.find(".hiddenMandatory"); if (null != o && o.length > 0) { var a = o[0]; n.find("[name=mandatory]").attr("checked", "true" == a.value), n.find("#pMandatory").show } else n.find("#pMandatory").hide(); n.find("[name=title]").val(i.find(".control-label").text()); var r = fieldPopup[t]; void 0 !== r && r(t, e) }, t.updateAttribute = function (t, e) { function n(t) { var e = {}; return e.storageType = 1, "textbox" == t ? e.fieldInputType = 1 : "passwordbox" == t ? e.fieldInputType = 2 : "combobox" == t ? e.fieldInputType = 3 : "checkboxgroup" == t ? e.fieldInputType = 4 : "radiogroup" == t ? e.fieldInputType = 5 : "selectmultiplelist" == t ? e.fieldInputType = 6 : "date" == t ? e.fieldInputType = 7 : "text" == t ? e.fieldInputType = 8 : "btn" == t ? (e.fieldInputType = 16, e.storageType = 0) : "image" == t ? e.fieldInputType = 17 : $.msgBox({ title: "Ooops", content: "未知类型的控件！", type: "error", buttons: [{ value: "Ok" }] }), e } var i = $("#eavForm").find("input[name=title]").val(); if (null == i || "" == i) return $.msgBox({ title: "Master / Attribute", content: "字段标题需要输入！", type: "alert" }), !1; var o = {}, a = null; $("#eavForm").find("input, textarea, select").each(function (t, e) { a = "checkbox" == e.type ? e.checked : e.value, o[e.name] = a }), function (t) { var e = $("#" + t.forCtrl); e.find(".control-label").text(t.title); var i = e.find(".hiddenMandatory"); null != i && i.length > 0 && (i[0].value = t.mandatory); var o = "" != e.find(".hiddenAttributeEntity").val() ? $.parseJSON(e.find(".hiddenAttributeEntity").val()) : {}; o.CompanyID = kmaster.gselectedCompanyID, o.EntityDefID = kmaster.mcurrentEntityDefID, o.DivCtrlKey = t.forCtrl, o.AttrName = t.title, o.AttrDataType = t.datatype; var a = n(t.type); o.FieldInputType = a.fieldInputType, o.StorageType = a.storageType, o.Format = t.dateformat, o.IsMandatory = t.mandatory, o.ConditionKey = t.conditionkey, jshelper.ajaxPost("api/eavdata/SaveAttribute", JSON.stringify(o), function (n) { if (1 == n.Status) { var i = n.Entity; e.find(".hiddenAttributeEntity").attr("value", JSON.stringify(i)), t.code = i.AttrCode; var o = fieldChangeSave[t.type]; void 0 !== o && o(t); var a = $("#selected-content")[0].outerHTML, r = { ID: kmaster.mcurrentEntityDefID, TemplateContent: a }; jshelper.ajaxPost("api/eavdata/SaveTemplateContent", JSON.stringify(r), function (t) { 1 == t.Status ? $.msgBox({ title: "Master / Attribute", content: "字段和模板内容已经更新！", type: "info" }) : $.msgBox({ title: "Ooops", content: t.Message, type: "error", buttons: [{ value: "Ok" }] }) }) } else $.msgBox({ title: "Ooops", content: n.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }(o) }, t.deleteField = function (t, e) { var n = $("#eavForm").find("input[name=forCtrl]").val(), i = $("#" + n); window.console.log(i.find(".hiddenAttributeEntity").val()), $.msgBox({ title: "Are You Sure", content: "确实要删除该控件吗？", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (t) { if ("Yes" == t) { var e = "" != i.find(".hiddenAttributeEntity").val() ? $.parseJSON(i.find(".hiddenAttributeEntity").val()) : null; if (i.remove(), null == e) return !1; var n = $("#selected-content")[0].outerHTML, o = { ID: kmaster.mcurrentEntityDefID, TemplateContent: n, HTMLContent: "" }, a = new Array; a[0] = e; var r = {}; r.EntityDef = o, r.EntityAttributeList = a, window.console.log("will delete field..."), window.console.log(r), jshelper.ajaxPost("api/eavdata/DeleteAttributeWithTemplate", JSON.stringify(r), function (t) { 1 == t.Status ? $.msgBox({ title: "Master / Attribute", content: "字段已经删除，并且模板内容已经更新！", type: "info" }) : $.msgBox({ title: "Ooops", content: t.Message, type: "error", buttons: [{ value: "Ok" }] }) }) } } }) }, t }(), fieldPopup = function () { function t() { } function e(t) { var e = null; return "" != t.find(".hiddenAttributeEntity").val() && (e = $.parseJSON(t.find(".hiddenAttributeEntity").val())), e } return t.popupControl = function (n, i) { var o = $("#eavForm"), a = $("#" + i), r = a.find(".hiddenMandatory"); if (null != r && r.length > 0) { var l = r[0]; o.find("[name=mandatory]").attr("checked", "true" == l.value), o.find("#pMandatory").show } else o.find("#pMandatory").hide(); o.find("[name=title]").val(a.find(".control-label").text()); var d = e(a); d && o.find("[name=conditionkey]").val(d.ConditionKey); var s = t[n]; void 0 !== s && s(n, i, d) }, t.textbox = function (t, e, n) { var i = $("#eavForm"), o = $("#" + e).find("input[type=text]")[0]; i.find("[name=placeholder]").val(o.placeholder), null != n && i.find("[name=datatype]").val(n.AttrDataType) }, t.passwordbox = function (t, e, n) { var i = $("#eavForm"), o = $("#" + e).find("input[type=password]")[0]; i.find("[name=placeholder]").val(o.placeholder) }, t.combobox = function (t, e, n) { var i = $("#eavForm"), o = $("#" + e).find("select")[0], a = ""; $(o).find("option").each(function (t, e) { a += e.text + "\n" }), i.find("[name=options]").val($.trim(a)) }, t.selectmultiplelist = function (e, n, i) { t.combobox(e, n) }, t.radiogroup = function (t, e, n) { var i = $("#eavForm"), o = $("#" + e), a = "", r = o.find("div").find("span"); o.find("div").find("input"); r.each(function (t, e) { a += $(e).text() + "\n" }), i.find("[name=options]").val($.trim(a)) }, t.checkboxgroup = function (e, n, i) { t.radiogroup(e, n) }, t.btn = function (t, e, n) { var i = $("#eavForm"), o = $("#" + e).find("button")[0]; i.find("[name=title]").val($(o).text().trim()), $("#tLabel").hide() }, t.text = function (t, e, n) { $("#eavForm"), $("#" + e).find(".ctrl-text")[0] }, t.date = function (t, e, n) { var i = $("#eavForm"); $("#" + e).find(".ctrl-date")[0]; i.find("[name=datatype]").val(kcommon.dataTypeDict.DATE), null != n && i.find("select[name=dateformat]").val(n.Format) }, t }(), fieldChangeSave = function () { function t() { } return t.textbox = function (t) { var e = $("#" + t.forCtrl).find("input[type=text]")[0]; e.placeholder = t.placeholder, e.name = t.code }, t.passwordbox = function (t) { var e = $("#" + t.forCtrl).find("input[type=password]")[0]; e.placeholder = t.placeholder, e.name = t.code }, t.combobox = function (t) { var e = $("#" + t.forCtrl).find("select")[0]; e.name = t.code, $(e).empty(), $(t.options.split("\n")).each(function (t, n) { $(e).append("<option>" + $.trim(n) + "</option>") }) }, t.checkboxgroup = function (t) { var e = $("#" + t.forCtrl), n = $(".selectorField .ctrl-checkboxgroup span")[0], i = $(".selectorField .ctrl-checkboxgroup input")[0], o = e.find(".ctrl-checkboxgroup"); o.empty(), $(t.options.split("\n")).each(function (e, a) { var r = $(n).clone().text($.trim(a)), l = $(i).clone(); l[0].name = t.code, l[0].value = $.trim(a), r.prepend(l), $(o).append(r) }) }, t.selectmultiplelist = function (e) { t.combobox(e) }, t.radiogroup = function (t) { var e = $("#" + t.forCtrl), n = $(".selectorField .ctrl-radiogroup span")[0], i = $(".selectorField .ctrl-radiogroup input")[0], o = e.find(".ctrl-radiogroup"); o.empty(), $(t.options.split("\n")).each(function (e, a) { var r = $(n).clone().text($.trim(a)), l = $(i).clone(); l[0].name = t.code, l[0].value = $.trim(a), r.prepend(l), $(o).append(r) }) }, t.btn = function (t) { var e = $("#" + t.forCtrl).find("button")[0]; $(e).html($(e).html().replace($(e).text(), " " + $.trim(t.title))), e.name = t.code }, t.text = function (t) { var e = $("#" + t.forCtrl).find(".ctrl-text"); e.text(t.text), e.attr("name", t.code) }, t.date = function (t) { $("#" + t.forCtrl).find(".ctrl-date").attr("name", t.code) }, t.simpletext = function (t, e, n) { $("#" + t.forCtrl).find(e).text(n) }, t }(), tableManager = function () { function t() { } return t.appendTable = function () { for (var t = $("#sliderNumberColumn").slider("value"), e = '<div class="row">', n = 12 / t, i = 0; i < t; i++)e += '<div class="col-md-' + n + ' well droppedFields"></div>\n'; e += "</div>", $("#dialog-form-number-column").modal("hide"), $("#selected-content").append(e), kmaster.docReady() }, t }(), eavManager = function () { function t() { } return t.EntityDef = {}, t.Attributes = [], t.saveEntityDef = function () { var t = {}; if ($("#defForm").find("input").each(function (e, n) { t[n.name] = n.value }), "" != t.title && "" != t.name) { var e = {}; if (e.ID = kmaster.mcurrentEntityDefID, e.EntityTitle = t.label, e.EntityName = t.name, e.Description = t.desc, 0 == e.ID) { var n = '<div class="col-md-12 ui-sortable" id="selected-content"><div class="row" id="form-title-div"><input value=' + e.EntityTitle + ' class="input-large col-md-12 form-control" placeholder="请输入表单标题..." id="txtFormTitle" onclick="kmaster.popupEntityDef();" type="text"></div><div class="row"><div class="col-md-6 well droppedFields ui-droppable"></div><div class="col-md-6 well droppedFields ui-droppable"></div></div><div class="row"><div class="col-md-12 well action-bar droppedFields ui-droppable" style="min-height:80px;"></div></div></div>'; e.TemplateContent = n, e.HTMLContent = '<div class="row"><div class="col-md-6 droppedFields"></div><div class="col-md-6 droppedFields"></div></div><div class="row"><div class="col-md-12 action-bar droppedFields" style="min-height:80px;"></div></div>' } jshelper.ajaxPost("api/eavdata/SaveEntityDef", JSON.stringify(e), function (t) { if (1 == t.Status) { $.msgBox({ title: "Master / Entity", content: "表单记录已经成功保存！", type: "info" }); var e = t.Entity; kmaster.mcurrentEntityDefID = e.ID, $("#txtFormTitle").attr("value", e.EntityTitle), $("#selected-content").replaceWith(e.TemplateContent), kmaster.docReady() } else $.msgBox({ title: "Ooops", content: t.Message, type: "error", buttons: [{ value: "Ok" }] }) }) } else $.msgBox({ title: "Master / Entity", content: "表单信息不完整，请输入表单标题等基本信息再点击保存！", type: "info" }) }, t.SaveTemplateWithHTMLContent = function () { var t = $("#selected-content")[0].outerHTML, e = kmaster.generateHTMLContent(), n = { ID: kmaster.mcurrentEntityDefID, TemplateContent: t, HTMLContent: e }; jshelper.ajaxPost("api/eavdata/SaveTemplateWithHTMLContent", JSON.stringify(n), function (t) { 1 == t.Status ? $.msgBox({ title: "Master / Entity", content: "表单模板已经成功保存！", type: "info" }) : $.msgBox({ title: "Ooops", content: t.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, t.saveAttribute = function (t) { jshelper.ajaxPost("api/eavdata/SaveAttribute", JSON.stringify(t), function (t) { 1 == t.Status ? $.msgBox({ title: "Master / Attribute", content: "属性记录已经成功保存！", type: "info" }) : $.msgBox({ title: "Ooops", content: t.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, t }(), attributelist = function () { function t() { } return t.mselectedAttributeID = 0, t.load = function () { 0 != kmaster.mcurrentEntityDefID && jshelper.ajaxGet("api/eavdata/GetEntityAttributeList/" + kmaster.mcurrentEntityDefID, null, function (e) { if (1 == e.Status) { var n = document.querySelector("#myAttributeGrid"); $(n).empty(); var i = { columnDefs: [{ headerName: "ID", field: "ID", width: 40 }, { headerName: "字段名称", field: "AttrName", width: 120 }, { headerName: "字段编码", field: "AttrCode", width: 120 }, { headerName: "数据类型", field: "AttrDataType", width: 160 }, { headerName: "控件类型", field: "FieldInputType", width: 60 }, { headerName: "描述", field: "Description", width: 120 }], rowSelection: "single", onSelectionChanged: function () { i.api.getSelectedRows().forEach(function (e, n) { t.mselectedAttributeID = e.ID, t.mselectedAttributeRow = e }) } }; new agGrid.Grid(n, i), i.api.setRowData(e.Entity), $("#loading-indicator").hide() } else $.msgBox({ title: "EntityDef / List", content: "读取字段列表记录失败！错误信息：" + e.Message, type: "error" }) }) }, t }(), setting = function () { function t() { } return t.mcurrentProcessGUID = "", t.loadProcess = function () { if ("" == kmaster.mcurrentEntityDefID) return $.msgBox({ title: "Master / Setting", content: "请先选定表单，然后再绑定流程！", type: "alert" }), $("#modalSettingForm").modal("hide"), !1; var e = {}; e.CompanyID = lsm.getWebLogonCompanyID(), e.EntityDefID = kmaster.mcurrentEntityDefID, jshelper.ajaxPost("api/eavprocess/GetEntityProcessView", JSON.stringify(e), function (e) { if (1 == e.Status) { var n = e.Entity.ProcessList, i = e.Entity.EntityProcess; $.each(n, function (t, e) { $("#ddlProcesses").append($("<option>", { value: e.ProcessGUID, text: e.ProcessName })) }), i && ($("#ddlProcesses").val(i.ProcessGUID), t.mcurrentProcessGUID = i.ProcessGUID) } else $.msgBox({ title: "Master / Setting", content: "读取表单绑定流程记录失败！错误信息：" + e.Message, type: "error" }) }) }, t.sure = function () { if ("" == kmaster.mcurrentEntityDefID) return $.msgBox({ title: "Master / Setting", content: "请先选定表单，再绑定流程！", type: "alert" }), $("#modalSettingForm").modal("hide"), !1; var e = $.trim($("#ddlProcesses").val()); if ("" != e && e != t.mcurrentProcessGUID) { var n = {}; n.EntityDefID = kmaster.mcurrentEntityDefID, n.ProcessGUID = e, n.ProcessName = $("#ddlProcesses option:selected").text(), jshelper.ajaxPost("api/eavprocess/SaveEntityProcess", JSON.stringify(n), function (n) { 1 == n.Status ? ($.msgBox({ title: "Master / Setting", content: "流程绑定信息已经保存！", type: "info" }), t.mcurrentProcessGUID = e, $("#modalSettingForm").modal("hide")) : $.msgBox({ title: "Master / Setting", content: "保存表单绑定流程记录失败！错误信息：" + n.Message, type: "error" }) }) } else $("#modalSettingForm").modal("hide") }, t }();